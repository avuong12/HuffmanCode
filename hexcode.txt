0000000: 696d 706f 7274 202a 2061 7320 636f 6d70  import * as comp
0000010: 7265 7373 696f 6e48 6173 6854 6162 6c65  ressionHashTable
0000020: 2066 726f 6d20 272e 2f63 6f6d 7072 6573   from './compres
0000030: 7369 6f6e 2d68 6173 682d 7461 626c 652e  sion-hash-table.
0000040: 6a73 273b 0a69 6d70 6f72 7420 2a20 6173  js';.import * as
0000050: 2070 7269 6f72 6974 7951 7565 7565 2066   priorityQueue f
0000060: 726f 6d20 272e 2f6d 696e 4865 6170 2e6a  rom './minHeap.j
0000070: 7327 3b0a 0a63 6f6e 7374 2066 7265 7148  s';..const freqH
0000080: 6173 6820 3d20 636f 6d70 7265 7373 696f  ash = compressio
0000090: 6e48 6173 6854 6162 6c65 2e66 7265 7175  nHashTable.frequ
00000a0: 656e 6379 4861 7368 5461 626c 6528 0a20  encyHashTable(. 
00000b0: 2027 7468 6520 7175 6963 6b20 6272 6f77   'the quick brow
00000c0: 6e20 666f 7820 6a75 6d70 6564 206f 7665  n fox jumped ove
00000d0: 7220 7468 6520 6665 6e63 6527 0a29 3b0a  r the fence'.);.
00000e0: 0a63 6c61 7373 2048 7566 666d 616e 4e6f  .class HuffmanNo
00000f0: 6465 207b 0a20 2063 6f6e 7374 7275 6374  de {.  construct
0000100: 6f72 2863 6f75 6e74 2c20 6368 6172 203d  or(count, char =
0000110: 206e 756c 6c2c 206c 6566 7420 3d20 6e75   null, left = nu
0000120: 6c6c 2c20 7269 6768 7420 3d20 6e75 6c6c  ll, right = null
0000130: 2920 7b0a 2020 2020 7468 6973 2e63 6861  ) {.    this.cha
0000140: 7220 3d20 6368 6172 3b0a 2020 2020 7468  r = char;.    th
0000150: 6973 2e63 6f75 6e74 203d 2063 6f75 6e74  is.count = count
0000160: 3b0a 2020 2020 7468 6973 2e6c 6566 7420  ;.    this.left 
0000170: 3d20 6c65 6674 3b0a 2020 2020 7468 6973  = left;.    this
0000180: 2e72 6967 6874 203d 2072 6967 6874 3b0a  .right = right;.
0000190: 2020 7d0a 7d0a 0a66 756e 6374 696f 6e20    }.}..function 
00001a0: 6765 7441 6c6c 4e6f 6465 7328 6f62 6a29  getAllNodes(obj)
00001b0: 207b 0a20 206c 6574 2061 6c6c 4e6f 6465   {.  let allNode
00001c0: 7320 3d20 5b5d 3b0a 2020 666f 7220 286c  s = [];.  for (l
00001d0: 6574 206b 6579 7320 696e 206f 626a 2920  et keys in obj) 
00001e0: 7b0a 2020 2020 616c 6c4e 6f64 6573 2e70  {.    allNodes.p
00001f0: 7573 6828 6e65 7720 4875 6666 6d61 6e4e  ush(new HuffmanN
0000200: 6f64 6528 6f62 6a5b 6b65 7973 5d2c 206b  ode(obj[keys], k
0000210: 6579 7329 293b 0a20 207d 0a20 2072 6574  eys));.  }.  ret
0000220: 7572 6e20 616c 6c4e 6f64 6573 3b0a 7d0a  urn allNodes;.}.
0000230: 0a63 6f6e 7374 2066 7265 714e 6f64 6573  .const freqNodes
0000240: 203d 2067 6574 416c 6c4e 6f64 6573 2866   = getAllNodes(f
0000250: 7265 7148 6173 6829 3b0a 0a2f 2f20 436f  reqHash);..// Co
0000260: 6e73 7472 7563 7420 6120 7072 696f 7269  nstruct a priori
0000270: 7479 2071 7565 7565 2028 6d69 6e20 6865  ty queue (min he
0000280: 6170 2920 666f 7220 616c 6c20 7468 6520  ap) for all the 
0000290: 6e6f 6465 7320 696e 2061 6e20 6172 7261  nodes in an arra
00002a0: 792e 0a0a 6675 6e63 7469 6f6e 2068 7566  y...function huf
00002b0: 666d 616e 5472 6565 286e 6f64 6573 2920  fmanTree(nodes) 
00002c0: 7b0a 2020 636f 6e73 7420 6e6f 6465 4865  {.  const nodeHe
00002d0: 6170 203d 206e 6577 2070 7269 6f72 6974  ap = new priorit
00002e0: 7951 7565 7565 2e4d 696e 4865 6170 2828  yQueue.MinHeap((
00002f0: 4129 203d 3e20 412e 636f 756e 7429 3b0a  A) => A.count);.
0000300: 2020 666f 7220 286c 6574 2069 203d 2030    for (let i = 0
0000310: 3b20 6920 3c20 6e6f 6465 732e 6c65 6e67  ; i < nodes.leng
0000320: 7468 3b20 692b 2b29 207b 0a20 2020 206e  th; i++) {.    n
0000330: 6f64 6548 6561 702e 696e 7365 7274 286e  odeHeap.insert(n
0000340: 6f64 6573 5b69 5d29 3b0a 2020 7d0a 2020  odes[i]);.  }.  
0000350: 7768 696c 6520 286e 6f64 6548 6561 702e  while (nodeHeap.
0000360: 7369 7a65 2829 203e 2031 2920 7b0a 2020  size() > 1) {.  
0000370: 2020 636f 6e73 7420 6e6f 6465 4120 3d20    const nodeA = 
0000380: 6e6f 6465 4865 6170 2e65 7874 7261 6374  nodeHeap.extract
0000390: 4d69 6e28 293b 0a20 2020 2063 6f6e 7374  Min();.    const
00003a0: 206e 6f64 6542 203d 206e 6f64 6548 6561   nodeB = nodeHea
00003b0: 702e 6578 7472 6163 744d 696e 2829 3b0a  p.extractMin();.
00003c0: 2020 2020 2f2f 2063 6f6d 6269 6e65 206e      // combine n
00003d0: 6f64 6573 0a20 2020 2063 6f6e 7374 206e  odes.    const n
00003e0: 6577 4e6f 6465 203d 2063 6f6d 6269 6e65  ewNode = combine
00003f0: 4e6f 6465 7328 6e6f 6465 412c 206e 6f64  Nodes(nodeA, nod
0000400: 6542 293b 0a20 2020 206e 6f64 6548 6561  eB);.    nodeHea
0000410: 702e 696e 7365 7274 286e 6577 4e6f 6465  p.insert(newNode
0000420: 293b 0a20 207d 0a20 2072 6574 7572 6e20  );.  }.  return 
0000430: 6e6f 6465 4865 6170 2e68 6561 705b 305d  nodeHeap.heap[0]
0000440: 3b0a 7d0a 0a66 756e 6374 696f 6e20 636f  ;.}..function co
0000450: 6d62 696e 654e 6f64 6573 286e 6f64 6541  mbineNodes(nodeA
0000460: 2c20 6e6f 6465 4229 207b 0a20 2063 6f6e  , nodeB) {.  con
0000470: 7374 2063 6f75 6e74 203d 206e 6f64 6541  st count = nodeA
0000480: 2e63 6f75 6e74 202b 206e 6f64 6542 2e63  .count + nodeB.c
0000490: 6f75 6e74 3b0a 2020 636f 6e73 7420 636f  ount;.  const co
00004a0: 6d62 696e 6564 4e6f 6465 203d 206e 6577  mbinedNode = new
00004b0: 2048 7566 666d 616e 4e6f 6465 2863 6f75   HuffmanNode(cou
00004c0: 6e74 293b 0a20 2063 6f6d 6269 6e65 644e  nt);.  combinedN
00004d0: 6f64 652e 6c65 6674 203d 206e 6f64 6541  ode.left = nodeA
00004e0: 3b0a 2020 636f 6d62 696e 6564 4e6f 6465  ;.  combinedNode
00004f0: 2e72 6967 6874 203d 206e 6f64 6542 3b0a  .right = nodeB;.
0000500: 2020 7265 7475 726e 2063 6f6d 6269 6e65    return combine
0000510: 644e 6f64 653b 0a7d 0a0a 2f2f 2063 6f6e  dNode;.}..// con
0000520: 736f 6c65 2e6c 6f67 2868 7566 666d 616e  sole.log(huffman
0000530: 5472 6565 2866 7265 714e 6f64 6573 2929  Tree(freqNodes))
0000540: 3b0a 0a66 756e 6374 696f 6e20 7472 6176  ;..function trav
0000550: 7365 7273 4246 5328 7472 6565 2920 7b0a  sersBFS(tree) {.
0000560: 2020 6c65 7420 7175 6575 6520 3d20 5b5d    let queue = []
0000570: 3b0a 2020 6c65 7420 6375 7272 656e 744e  ;.  let currentN
0000580: 6f64 6520 3d20 7472 6565 3b0a 2020 6c65  ode = tree;.  le
0000590: 7420 6465 7074 6843 6f75 6e74 203d 2030  t depthCount = 0
00005a0: 3b0a 2020 6c65 7420 7072 696e 7453 7472  ;.  let printStr
00005b0: 696e 6720 3d20 5b5d 3b0a 2020 6966 2028  ing = [];.  if (
00005c0: 6375 7272 656e 744e 6f64 6520 213d 3d20  currentNode !== 
00005d0: 6e75 6c6c 2920 7b0a 2020 2020 7175 6575  null) {.    queu
00005e0: 652e 7075 7368 287b 206e 6f64 653a 2063  e.push({ node: c
00005f0: 7572 7265 6e74 4e6f 6465 2c20 6465 7074  urrentNode, dept
0000600: 683a 2030 207d 293b 0a20 207d 0a0a 2020  h: 0 });.  }..  
0000610: 7768 696c 6520 2871 7565 7565 2e6c 656e  while (queue.len
0000620: 6774 6820 3e20 3029 207b 0a20 2020 206c  gth > 0) {.    l
0000630: 6574 2063 7572 7265 6e74 203d 2071 7565  et current = que
0000640: 7565 2e73 6869 6674 2829 3b0a 2020 2020  ue.shift();.    
0000650: 6375 7272 656e 744e 6f64 6520 3d20 6375  currentNode = cu
0000660: 7272 656e 742e 6e6f 6465 3b0a 2020 2020  rrent.node;.    
0000670: 6c65 7420 6375 7272 656e 7464 6570 7468  let currentdepth
0000680: 203d 2063 7572 7265 6e74 2e64 6570 7468   = current.depth
0000690: 3b0a 2020 2020 2f2f 2063 6865 636b 2069  ;.    // check i
00006a0: 7320 6375 7272 656e 7420 6e6f 6465 2069  s current node i
00006b0: 7320 6174 2074 6865 2073 616d 6520 6c65  s at the same le
00006c0: 7665 6c20 6173 2074 6865 2070 7265 7669  vel as the previ
00006d0: 6f75 7320 696e 2070 7269 6e74 5374 7269  ous in printStri
00006e0: 6e67 2e0a 2020 2020 6966 2028 6375 7272  ng..    if (curr
00006f0: 656e 7464 6570 7468 203d 3d3d 2064 6570  entdepth === dep
0000700: 7468 436f 756e 7429 207b 0a20 2020 2020  thCount) {.     
0000710: 2070 7269 6e74 5374 7269 6e67 2e70 7573   printString.pus
0000720: 6828 7b20 6368 6172 3a20 6375 7272 656e  h({ char: curren
0000730: 744e 6f64 652e 6368 6172 2c20 636f 756e  tNode.char, coun
0000740: 743a 2063 7572 7265 6e74 4e6f 6465 2e63  t: currentNode.c
0000750: 6f75 6e74 207d 293b 0a20 2020 207d 2065  ount });.    } e
0000760: 6c73 6520 7b0a 2020 2020 2020 2f2f 206e  lse {.      // n
0000770: 6577 2064 6570 7468 0a20 2020 2020 2063  ew depth.      c
0000780: 6f6e 736f 6c65 2e6c 6f67 2870 7269 6e74  onsole.log(print
0000790: 5374 7269 6e67 293b 0a20 2020 2020 2070  String);.      p
00007a0: 7269 6e74 5374 7269 6e67 203d 205b 7b20  rintString = [{ 
00007b0: 6368 6172 3a20 6375 7272 656e 744e 6f64  char: currentNod
00007c0: 652e 6368 6172 2c20 636f 756e 743a 2063  e.char, count: c
00007d0: 7572 7265 6e74 4e6f 6465 2e63 6f75 6e74  urrentNode.count
00007e0: 207d 5d3b 0a20 2020 2020 2064 6570 7468   }];.      depth
00007f0: 436f 756e 742b 2b3b 0a20 2020 207d 0a0a  Count++;.    }..
0000800: 2020 2020 6966 2028 6375 7272 656e 744e      if (currentN
0000810: 6f64 652e 6c65 6674 2021 3d3d 206e 756c  ode.left !== nul
0000820: 6c29 207b 0a20 2020 2020 2071 7565 7565  l) {.      queue
0000830: 2e70 7573 6828 7b20 6e6f 6465 3a20 6375  .push({ node: cu
0000840: 7272 656e 744e 6f64 652e 6c65 6674 2c20  rrentNode.left, 
0000850: 6465 7074 683a 2063 7572 7265 6e74 6465  depth: currentde
0000860: 7074 6820 2b20 3120 7d29 3b0a 2020 2020  pth + 1 });.    
0000870: 7d0a 2020 2020 6966 2028 6375 7272 656e  }.    if (curren
0000880: 744e 6f64 652e 7269 6768 7420 213d 3d20  tNode.right !== 
0000890: 6e75 6c6c 2920 7b0a 2020 2020 2020 7175  null) {.      qu
00008a0: 6575 652e 7075 7368 287b 206e 6f64 653a  eue.push({ node:
00008b0: 2063 7572 7265 6e74 4e6f 6465 2e72 6967   currentNode.rig
00008c0: 6874 2c20 6465 7074 683a 2063 7572 7265  ht, depth: curre
00008d0: 6e74 6465 7074 6820 2b20 3120 7d29 3b0a  ntdepth + 1 });.
00008e0: 2020 2020 7d0a 2020 7d0a 2020 2f2f 2070      }.  }.  // p
00008f0: 7269 6e74 2074 6865 206c 6173 7420 6465  rint the last de
0000900: 7074 682e 0a20 2063 6f6e 736f 6c65 2e6c  pth..  console.l
0000910: 6f67 2870 7269 6e74 5374 7269 6e67 293b  og(printString);
0000920: 0a7d 0a0a 636f 6e73 7420 6672 6571 5472  .}..const freqTr
0000930: 6565 203d 2068 7566 666d 616e 5472 6565  ee = huffmanTree
0000940: 2866 7265 714e 6f64 6573 293b 0a0a 6675  (freqNodes);..fu
0000950: 6e63 7469 6f6e 2068 7566 666d 616e 436f  nction huffmanCo
0000960: 6465 2874 7265 652c 2063 6f64 654f 626a  de(tree, codeObj
0000970: 6563 7420 3d20 7b7d 2c20 7061 7468 203d  ect = {}, path =
0000980: 205b 5d29 207b 0a20 2069 6620 2874 7265   []) {.  if (tre
0000990: 652e 6c65 6674 203d 3d3d 206e 756c 6c20  e.left === null 
00009a0: 2626 2074 7265 652e 7269 6768 7420 3d3d  && tree.right ==
00009b0: 3d20 6e75 6c6c 2920 7b0a 2020 2020 636f  = null) {.    co
00009c0: 6465 4f62 6a65 6374 5b74 7265 652e 6368  deObject[tree.ch
00009d0: 6172 5d20 3d20 7061 7468 3b0a 2020 7d0a  ar] = path;.  }.
00009e0: 0a20 2069 6620 2874 7265 652e 6c65 6674  .  if (tree.left
00009f0: 2021 3d3d 206e 756c 6c29 207b 0a20 2020   !== null) {.   
0000a00: 2068 7566 666d 616e 436f 6465 2874 7265   huffmanCode(tre
0000a10: 652e 6c65 6674 2c20 636f 6465 4f62 6a65  e.left, codeObje
0000a20: 6374 2c20 7061 7468 2e63 6f6e 6361 7428  ct, path.concat(
0000a30: 3029 293b 0a20 207d 0a0a 2020 6966 2028  0));.  }..  if (
0000a40: 7472 6565 2e72 6967 6874 2021 3d3d 206e  tree.right !== n
0000a50: 756c 6c29 207b 0a20 2020 2068 7566 666d  ull) {.    huffm
0000a60: 616e 436f 6465 2874 7265 652e 7269 6768  anCode(tree.righ
0000a70: 742c 2063 6f64 654f 626a 6563 742c 2070  t, codeObject, p
0000a80: 6174 682e 636f 6e63 6174 2831 2929 3b0a  ath.concat(1));.
0000a90: 2020 7d0a 0a20 2072 6574 7572 6e20 636f    }..  return co
0000aa0: 6465 4f62 6a65 6374 3b0a 7d0a 0a63 6f6e  deObject;.}..con
0000ab0: 736f 6c65 2e6c 6f67 2868 7566 666d 616e  sole.log(huffman
0000ac0: 436f 6465 2866 7265 7154 7265 6529 293b  Code(freqTree));
0000ad0: 0a                                       .
